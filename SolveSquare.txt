;input
    in
    pop AX
    in
    pop BX
    in
    pop CX

    push 0
    push AX
je AX_NULL:         ; AX = 0 =>

    push 0
    push BX
je BX_NULL:         ; BX = 0 =>

    push 0
    push CX
je CX_NULL:         ; CX = 0 =>

;discriminant AX != 0, BX != 0, CX != 0
    push BX
    push BX         ; BX^2
    mul

    push 4
    push CX
    push AX         ; 4 * AX * CX
    mul
    mul

    sub             ; -

    pop DX          ; DX = BX^2 - 4 * AX * CX

    push DX
    push 0

    ja no_roots:    ; discriminant < 0

    push DX
    push 0

    je DX_NULL:

    ;answer 1
    push -1
    push BX         ; -BX
    mul

    push DX         ; sqrt (DX)
    sqrt

    sub             ; -

    push 2
    push AX         ; 2 * AX
    mul
    div             ; x1 = (-BX - sqrt  (DX)) / (2 * AX)

    ;answer 2
    push -1
    push BX         ; -BX
    mul

    push DX         ; sqrt (DX)
    sqrt

    add             ; +

    push 2
    push AX         ; 2 * AX
    mul
    div

    push 2          ; two roots
    out
    out             ; first  root
    out             ; second root
    hlt

AX_NULL:
    push 0
    push BX

    je AX_BX_NULL:  ; AX = 0 & BX = 0 =>

    push CX
    push BX
    div             ;   CX / BX

    push -1
    mul             ; - CX / BX

    push 1
    out             ; one root
    out             ; x = -CX / BX

    hlt

BX_NULL:
    push 0
    push CX

    ja no_roots:

    push -1
    push CX         ; -CX
    mul

    push AX         ; -CX / AX
    div

    sqrt
    pop  [1]        ;[1] =   sqrt (-CX / AX)

    push [1]        ; x1 =   sqrt (-CX / AX)
    push [1]
    push -1
    mul             ; x2 = - sqrt (-CX / AX)

    out
    out

    hlt

CX_NULL:
    push BX
    push AX
    div
    push -1
    mul             ; x2 = -BX/AX (AX != 0)

    push 0          ; x1 = 0
    push 2          ; two roots

    out
    out
    out

    hlt

DX_NULL:
    push BX
    push -1
    mul

    push AX
    push 2
    mul

    div             ; x = -BX / (2 * AX)

    push 1
    out             ; one root

    out             ; root

    hlt

no_roots:
    push 0
    out

    hlt

answ_null:
    push 1
    push [1]
    out
    out

    hlt

AX_BX_NULL:
    push 0
    push CX

    je AX_BX_CX_NULL:

    jmp no_roots:

AX_BX_CX_NULL:
    push 8          ; inf
    out

    hlt
